// Copyright 2021 The AccessKit Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Derived from Chromium's accessibility abstraction.
// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE.chromium file.

syntax = "proto3";

package accesskit;

import "google/protobuf/wrappers.proto";

option csharp_namespace = "AccessKit.Schema";
option java_package = "dev.accesskit.schema";
option java_outer_classname = "AccessKitSchema";
option java_multiple_files = true;
option objc_class_prefix = "AXK";
option go_package = "accesskit.dev/schema";

// A role is the type of an accessibility node.
//
// The majority of these roles come from the ARIA specification. Reference
// the latest draft for proper usage.
//
// Like the AccessKit schema as a whole, this list is largely taken
// from Chromium. However, unlike Chromium's alphabetized list, this list
// is ordered roughly by expected usage frequency (with the notable exception
// of the default UNKNOWN role). This is more efficient on the wire, since
// integers use a variable-length encoding. Also, since this schema
// is intended to have a stable wire representation, new roles should only
// be appended to this enum.
enum Role {
  UNKNOWN = 0;

  INLINE_TEXT_BOX = 1;
  CELL = 2;
  STATIC_TEXT = 3;
  IMAGE = 4;
  LINK = 5;
  ROW = 6;
  LIST_ITEM = 7;

  // Contains the bullet, number, or other marker for a list item.
  LIST_MARKER = 8;

  TREE_ITEM = 9;
  LIST_BOX_OPTION = 10;
  MENU_ITEM = 11;
  MENU_LIST_OPTION = 12;

  PARAGRAPH = 13;
  GROUP = 14;

  // Used for ARIA role="none"/"presentation" -- ignored in platform tree.
  PRESENTATION = 15;

  CHECK_BOX = 16;
  RADIO_BUTTON = 17;
  TEXT_FIELD = 18;
  BUTTON = 19;
  LABEL_TEXT = 20;
  PANE = 21;
  ROW_HEADER = 22;
  COLUMN_HEADER = 23;
  COLUMN = 24;
  ROW_GROUP = 25;
  LIST = 26;
  TABLE = 27;
  TABLE_HEADER_CONTAINER = 28;
  LAYOUT_TABLE_CELL = 29;
  LAYOUT_TABLE_ROW = 30;
  LAYOUT_TABLE = 31;
  SWITCH = 32;
  TOGGLE_BUTTON = 33;
  MENU = 34;

  ABBR = 35;
  ALERT = 36;
  ALERT_DIALOG = 37;
  APPLICATION = 38;
  ARTICLE = 39;
  AUDIO = 40;
  BANNER = 41;
  BLOCKQUOTE = 42;
  CANVAS = 43;
  CAPTION = 44;
  CARET = 45;
  CLIENT = 46;
  CODE = 47;
  COLOR_WELL = 48;
  COMBO_BOX_GROUPING = 49;
  COMBO_BOX_MENU_BUTTON = 50;
  COMPLEMENTARY = 51;
  COMMENT = 52;
  CONTENT_DELETION = 53;
  CONTENT_INSERTION = 54;
  CONTENT_INFO = 55;
  DATE = 56;
  DATE_TIME = 57;
  DEFINITION = 58;
  DESCRIPTION_LIST = 59;
  DESCRIPTION_LIST_DETAIL = 60;
  DESCRIPTION_LIST_TERM = 61;
  DETAILS = 62;
  DIALOG = 63;
  DIRECTORY = 64;
  DISCLOSURE_TRIANGLE = 65;
  DOCUMENT = 66;
  EMBEDDED_OBJECT = 67;
  EMPHASIS = 68;
  FEED = 69;
  FIGURE_CAPTION = 70;
  FIGURE = 71;
  FOOTER = 72;
  FOOTER_AS_NON_LANDMARK = 73;
  FORM = 74;
  GENERIC_CONTAINER = 75;
  GRID = 76;
  HEADER = 77;
  HEADER_AS_NON_LANDMARK = 78;
  HEADING = 79;
  IFRAME = 80;
  IFRAME_PRESENTATIONAL = 81;
  IME_CANDIDATE = 82;
  INPUT_TIME = 83;
  KEYBOARD = 84;
  LEGEND = 85;
  LINE_BREAK = 86;
  LIST_BOX = 87;
  LOG = 88;
  MAIN = 89;
  MARK = 90;
  MARQUEE = 91;
  MATH = 92;
  MENU_BAR = 93;
  MENU_ITEM_CHECK_BOX = 94;
  MENU_ITEM_RADIO = 95;
  MENU_LIST_POPUP = 96;
  METER = 97;
  NAVIGATION = 98;
  NOTE = 99;
  PLUGIN_OBJECT = 100;
  POPUP_BUTTON = 101;
  PORTAL = 102;
  PRE = 103;
  PROGRESS_INDICATOR = 104;
  RADIO_GROUP = 105;
  REGION = 106;
  ROOT_WEB_AREA = 107;
  RUBY = 108;
  RUBY_ANNOTATION = 109;
  SCROLL_BAR = 110;
  SCROLL_VIEW = 111;
  SEARCH = 112;
  SEARCH_BOX = 113;
  SECTION = 114;
  SLIDER = 115;
  SPIN_BUTTON = 116;
  SPLITTER = 117;
  STATUS = 118;
  STRONG = 119;
  SUGGESTION = 120;
  SVG_ROOT = 121;
  TAB = 122;
  TAB_LIST = 123;
  TAB_PANEL = 124;
  TERM = 125;
  TEXT_FIELD_WITH_COMBO_BOX = 126;
  TIME = 127;
  TIMER = 128;
  TITLE_BAR = 129;
  TOOLBAR = 130;
  TOOLTIP = 131;
  TREE = 132;
  TREE_GRID = 133;
  VIDEO = 134;
  WEB_VIEW = 135;
  WINDOW = 136;

  PDF_ACTIONABLE_HIGHLIGHT = 137;
  PDF_ROOT = 138;

  // --------------------------------------------------------------
  // ARIA Graphics module roles:
  // https://rawgit.com/w3c/graphics-aam/master/#mapping_role_table
  GRAPHICS_DOCUMENT = 139;
  GRAPHICS_OBJECT = 140;
  GRAPHICS_SYMBOL = 141;
  // End ARIA Graphics module roles.
  // --------------------------------------------------------------

  // --------------------------------------------------------------
  // DPub Roles:
  // https://www.w3.org/TR/dpub-aam-1.0/#mapping_role_table
  DOC_ABSTRACT = 142;
  DOC_ACKNOWLEDGEMENTS = 143;
  DOC_AFTERWORD = 144;
  DOC_APPENDIX = 145;
  DOC_BACK_LINK = 146;
  DOC_BIBLIO_ENTRY = 147;
  DOC_BIBLIOGRAPHY = 148;
  DOC_BIBLIO_REF = 149;
  DOC_CHAPTER = 150;
  DOC_COLOPHON = 151;
  DOC_CONCLUSION = 152;
  DOC_COVER = 153;
  DOC_CREDIT = 154;
  DOC_CREDITS = 155;
  DOC_DEDICATION = 156;
  DOC_ENDNOTE = 157;
  DOC_ENDNOTES = 158;
  DOC_EPIGRAPH = 159;
  DOC_EPILOGUE = 160;
  DOC_ERRATA = 161;
  DOC_EXAMPLE = 162;
  DOC_FOOTNOTE = 163;
  DOC_FOREWORD = 164;
  DOC_GLOSSARY = 165;
  DOC_GLOSS_REF = 166;
  DOC_INDEX = 167;
  DOC_INTRODUCTION = 168;
  DOC_NOTE_REF = 169;
  DOC_NOTICE = 170;
  DOC_PAGE_BREAK = 171;
  DOC_PAGE_FOOTER = 172;
  DOC_PAGE_HEADER = 173;
  DOC_PAGE_LIST = 174;
  DOC_PART = 175;
  DOC_PREFACE = 176;
  DOC_PROLOGUE = 177;
  DOC_PULLQUOTE = 178;
  DOC_QNA = 179;
  DOC_SUBTITLE = 180;
  DOC_TIP = 181;
  DOC_TOC = 182;
  // End DPub roles.
  // --------------------------------------------------------------

  // LIST_GRID behaves similar to an ARIA grid but is primarily used by
  // Chromium's TableView and its subclasses, so that they could be exposed
  // correctly on certain platforms.
  LIST_GRID = 183;

  // Chromium internal
  // TBD: Do we need this for any anticipated use case of AccessKit?
  DESKTOP = 184;
}

message Rect {
  float left = 1;
  float top = 2;
  float width = 3;
  float height = 4;
}

// 4x4 transformation matrix. Omit this message for the identity matrix,
// to save the cost of serialization and deserialization.
message Transform {
  // Column major order. Always 16 items.
  repeated float matrix = 1;
}

// The relative bounding box of a Node.
//
// This is an efficient, compact, serializable representation of a node's
// bounding box that requires minimal changes to the tree when layers are
// moved or scrolled. Computing the absolute bounding box of a node requires
// walking up the tree and applying node offsets and transforms until reaching
// the top.
//
// If the offset container id is present, the bounds are relative
// to the node with that offset container id.
//
// Otherwise, for a node other than the root, the bounds are relative to
// the root of the tree, and for the root of a tree, the bounds are relative
// to its immediate containing node.
message RelativeBounds {
  // The id of an ancestor node in the same Tree that this object's
  // bounding box is relative to. Omit if there's no offset container.
  google.protobuf.Int32Value offset_container_id = 1;

  // The relative bounding box of this node.
  Rect bounds = 2;

  // An additional transform to apply to position this object and its subtree.
  // This is rarely used and should be omitted if not needed, i.e. if
  // the transform would be the identity matrix.
  Transform transform = 3;
}

// A single accessible object. A complete UI is represented as a tree of these.
message Node {
  int32 id = 1;
  Role role = 2;
  RelativeBounds bounds = 3;
  repeated int32 child_id = 4;

  google.protobuf.StringValue name = 5;
  google.protobuf.StringValue description = 6;
  google.protobuf.StringValue value = 7;

  // TODO: add many more fields.
}

// The data associated with an accessibility tree that's global to the
// tree and not associated with any particular node in the tree.
message Tree {
  // The globally unique ID of this accessibility tree. The format of this ID
  // is up to the implementer. A UUID v4 is a safe choice.
  string id = 1;

  // The ID of the accessibility tree that this tree is contained in, if any.
  google.protobuf.StringValue parent_tree_id = 2;

  // The ID of the accessibility tree that has focus, if it's a descendant
  // of this tree.
  google.protobuf.StringValue focused_tree_id = 3;

  // The node with keyboard focus within this tree, if any.
  google.protobuf.Int32Value focused_node_id = 4;

  // The node that's used as the root scroller, if any. On some platforms
  // like Android we need to ignore accessibility scroll offsets for
  // that node and get them from the viewport instead.
  google.protobuf.Int32Value root_scroller_id = 5;
}

// A TreeUpdate is a serializable representation of an atomic change
// to a tree. The sender and receiver must be in sync; the update
// is only meant to bring the tree from a specific previous state into
// its next state. Trying to apply it to the wrong tree should immediately
// die with a fatal assertion.
//
// A TreeUpdate consists of an optional node id to clear (meaning
// that all of that node's children and their descendants are deleted),
// followed by an ordered list of zero or more Node messages to be applied
// to the tree in order. An update may also include an optional new version
// of the Tree message that applies to the tree as a whole.
//
// Suppose that the next Node to be applied is |node|. The following
// invariants must hold:
// 1. Either
//   a) |node.id| is already in the tree, or
//   b) the tree is empty, and
//      |node| is the new root of the tree.
// 2. Every child id in |node.child_ids| must either be already a child
//        of this node, or a new id not previously in the tree. It is not
//        allowed to "reparent" a child to this node without first removing
//        that child from its previous parent.
// 3. When a new id appears in |node.child_ids|, the tree should create a
//        new uninitialized placeholder node for it immediately. That
//        placeholder must be updated within the same TreeUpdate, otherwise
//        it's a fatal error. This guarantees the tree is always complete
//        before or after a TreeUpdate.
message TreeUpdate {
  // The optional id of a node to clear, before applying any updates.
  // Clearing a node means deleting all of its children and their descendants,
  // but leaving that node in the tree. It's an error to clear a node but not
  // subsequently update it as part of the tree update.
  google.protobuf.Int32Value node_id_to_clear = 1;

  // The ordered list of nodes to update, according to the rules above.
  repeated Node node = 2;

  // Updated information about the tree as a whole. This may be omitted
  // if it has not changed since the previous update, but providing the same
  // information again is also allowed. This is required when initializing
  // a tree.
  Tree tree = 3;

  // The id of the tree's root node. This is required when the tree
  // is being initialized or if the root is changing.
  google.protobuf.Int32Value root_id = 4;
}
