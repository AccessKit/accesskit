// Copyright 2021 The AccessKit Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Derived from Chromium's accessibility abstraction.
// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE.chromium file.

syntax = "proto3";

package accesskit;

import "google/protobuf/wrappers.proto";

option csharp_namespace = "AccessKit.Schema";
option java_package = "dev.accesskit.schema";
option java_outer_classname = "AccessKitSchema";
option java_multiple_files = true;
option objc_class_prefix = "AXK";
option go_package = "accesskit.dev/schema";

// A role is the type of an accessibility node.
//
// The majority of these roles come from the ARIA specification. Reference
// the latest draft for proper usage.
//
// Like the AccessKit schema as a whole, this list is largely taken
// from Chromium. However, unlike Chromium's alphabetized list, this list
// is ordered roughly by expected usage frequency (with the notable exception
// of the default UNKNOWN role). This is more efficient on the wire, since
// integers use a variable-length encoding. Also, since this schema
// is intended to have a stable wire representation, new roles should only
// be appended to this enum.
enum Role {
  ROLE_UNKNOWN = 0;

  ROLE_INLINE_TEXT_BOX = 1;
  ROLE_CELL = 2;
  ROLE_STATIC_TEXT = 3;
  ROLE_IMAGE = 4;
  ROLE_LINK = 5;
  ROLE_ROW = 6;
  ROLE_LIST_ITEM = 7;

  // Contains the bullet, number, or other marker for a list item.
  ROLE_LIST_MARKER = 8;

  ROLE_TREE_ITEM = 9;
  ROLE_LIST_BOX_OPTION = 10;
  ROLE_MENU_ITEM = 11;
  ROLE_MENU_LIST_OPTION = 12;

  ROLE_PARAGRAPH = 13;
  ROLE_GROUP = 14;

  // Used for ARIA role="none"/"presentation" -- ignored in platform tree.
  ROLE_PRESENTATION = 15;

  ROLE_CHECK_BOX = 16;
  ROLE_RADIO_BUTTON = 17;
  ROLE_TEXT_FIELD = 18;
  ROLE_BUTTON = 19;
  ROLE_LABEL_TEXT = 20;
  ROLE_PANE = 21;
  ROLE_ROW_HEADER = 22;
  ROLE_COLUMN_HEADER = 23;
  ROLE_COLUMN = 24;
  ROLE_ROW_GROUP = 25;
  ROLE_LIST = 26;
  ROLE_TABLE = 27;
  ROLE_TABLE_HEADER_CONTAINER = 28;
  ROLE_LAYOUT_TABLE_CELL = 29;
  ROLE_LAYOUT_TABLE_ROW = 30;
  ROLE_LAYOUT_TABLE = 31;
  ROLE_SWITCH = 32;
  ROLE_TOGGLE_BUTTON = 33;
  ROLE_MENU = 34;

  ROLE_ABBR = 35;
  ROLE_ALERT = 36;
  ROLE_ALERT_DIALOG = 37;
  ROLE_APPLICATION = 38;
  ROLE_ARTICLE = 39;
  ROLE_AUDIO = 40;
  ROLE_BANNER = 41;
  ROLE_BLOCKQUOTE = 42;
  ROLE_CANVAS = 43;
  ROLE_CAPTION = 44;
  ROLE_CARET = 45;
  ROLE_CLIENT = 46;
  ROLE_CODE = 47;
  ROLE_COLOR_WELL = 48;
  ROLE_COMBO_BOX_GROUPING = 49;
  ROLE_COMBO_BOX_MENU_BUTTON = 50;
  ROLE_COMPLEMENTARY = 51;
  ROLE_COMMENT = 52;
  ROLE_CONTENT_DELETION = 53;
  ROLE_CONTENT_INSERTION = 54;
  ROLE_CONTENT_INFO = 55;
  ROLE_DATE = 56;
  ROLE_DATE_TIME = 57;
  ROLE_DEFINITION = 58;
  ROLE_DESCRIPTION_LIST = 59;
  ROLE_DESCRIPTION_LIST_DETAIL = 60;
  ROLE_DESCRIPTION_LIST_TERM = 61;
  ROLE_DETAILS = 62;
  ROLE_DIALOG = 63;
  ROLE_DIRECTORY = 64;
  ROLE_DISCLOSURE_TRIANGLE = 65;
  ROLE_DOCUMENT = 66;
  ROLE_EMBEDDED_OBJECT = 67;
  ROLE_EMPHASIS = 68;
  ROLE_FEED = 69;
  ROLE_FIGURE_CAPTION = 70;
  ROLE_FIGURE = 71;
  ROLE_FOOTER = 72;
  ROLE_FOOTER_AS_NON_LANDMARK = 73;
  ROLE_FORM = 74;
  ROLE_GENERIC_CONTAINER = 75;
  ROLE_GRID = 76;
  ROLE_HEADER = 77;
  ROLE_HEADER_AS_NON_LANDMARK = 78;
  ROLE_HEADING = 79;
  ROLE_IFRAME = 80;
  ROLE_IFRAME_PRESENTATIONAL = 81;
  ROLE_IME_CANDIDATE = 82;
  ROLE_INPUT_TIME = 83;
  ROLE_KEYBOARD = 84;
  ROLE_LEGEND = 85;
  ROLE_LINE_BREAK = 86;
  ROLE_LIST_BOX = 87;
  ROLE_LOG = 88;
  ROLE_MAIN = 89;
  ROLE_MARK = 90;
  ROLE_MARQUEE = 91;
  ROLE_MATH = 92;
  ROLE_MENU_BAR = 93;
  ROLE_MENU_ITEM_CHECK_BOX = 94;
  ROLE_MENU_ITEM_RADIO = 95;
  ROLE_MENU_LIST_POPUP = 96;
  ROLE_METER = 97;
  ROLE_NAVIGATION = 98;
  ROLE_NOTE = 99;
  ROLE_PLUGIN_OBJECT = 100;
  ROLE_POPUP_BUTTON = 101;
  ROLE_PORTAL = 102;
  ROLE_PRE = 103;
  ROLE_PROGRESS_INDICATOR = 104;
  ROLE_RADIO_GROUP = 105;
  ROLE_REGION = 106;
  ROLE_ROOT_WEB_AREA = 107;
  ROLE_RUBY = 108;
  ROLE_RUBY_ANNOTATION = 109;
  ROLE_SCROLL_BAR = 110;
  ROLE_SCROLL_VIEW = 111;
  ROLE_SEARCH = 112;
  ROLE_SEARCH_BOX = 113;
  ROLE_SECTION = 114;
  ROLE_SLIDER = 115;
  ROLE_SPIN_BUTTON = 116;
  ROLE_SPLITTER = 117;
  ROLE_STATUS = 118;
  ROLE_STRONG = 119;
  ROLE_SUGGESTION = 120;
  ROLE_SVG_ROOT = 121;
  ROLE_TAB = 122;
  ROLE_TAB_LIST = 123;
  ROLE_TAB_PANEL = 124;
  ROLE_TERM = 125;
  ROLE_TEXT_FIELD_WITH_COMBO_BOX = 126;
  ROLE_TIME = 127;
  ROLE_TIMER = 128;
  ROLE_TITLE_BAR = 129;
  ROLE_TOOLBAR = 130;
  ROLE_TOOLTIP = 131;
  ROLE_TREE = 132;
  ROLE_TREE_GRID = 133;
  ROLE_VIDEO = 134;
  ROLE_WEB_VIEW = 135;
  ROLE_WINDOW = 136;

  ROLE_PDF_ACTIONABLE_HIGHLIGHT = 137;
  ROLE_PDF_ROOT = 138;

  // --------------------------------------------------------------
  // ARIA Graphics module roles:
  // https://rawgit.com/w3c/graphics-aam/master/#mapping_role_table
  ROLE_GRAPHICS_DOCUMENT = 139;
  ROLE_GRAPHICS_OBJECT = 140;
  ROLE_GRAPHICS_SYMBOL = 141;
  // End ARIA Graphics module roles.
  // --------------------------------------------------------------

  // --------------------------------------------------------------
  // DPub Roles:
  // https://www.w3.org/TR/dpub-aam-1.0/#mapping_role_table
  ROLE_DOC_ABSTRACT = 142;
  ROLE_DOC_ACKNOWLEDGEMENTS = 143;
  ROLE_DOC_AFTERWORD = 144;
  ROLE_DOC_APPENDIX = 145;
  ROLE_DOC_BACK_LINK = 146;
  ROLE_DOC_BIBLIO_ENTRY = 147;
  ROLE_DOC_BIBLIOGRAPHY = 148;
  ROLE_DOC_BIBLIO_REF = 149;
  ROLE_DOC_CHAPTER = 150;
  ROLE_DOC_COLOPHON = 151;
  ROLE_DOC_CONCLUSION = 152;
  ROLE_DOC_COVER = 153;
  ROLE_DOC_CREDIT = 154;
  ROLE_DOC_CREDITS = 155;
  ROLE_DOC_DEDICATION = 156;
  ROLE_DOC_ENDNOTE = 157;
  ROLE_DOC_ENDNOTES = 158;
  ROLE_DOC_EPIGRAPH = 159;
  ROLE_DOC_EPILOGUE = 160;
  ROLE_DOC_ERRATA = 161;
  ROLE_DOC_EXAMPLE = 162;
  ROLE_DOC_FOOTNOTE = 163;
  ROLE_DOC_FOREWORD = 164;
  ROLE_DOC_GLOSSARY = 165;
  ROLE_DOC_GLOSS_REF = 166;
  ROLE_DOC_INDEX = 167;
  ROLE_DOC_INTRODUCTION = 168;
  ROLE_DOC_NOTE_REF = 169;
  ROLE_DOC_NOTICE = 170;
  ROLE_DOC_PAGE_BREAK = 171;
  ROLE_DOC_PAGE_FOOTER = 172;
  ROLE_DOC_PAGE_HEADER = 173;
  ROLE_DOC_PAGE_LIST = 174;
  ROLE_DOC_PART = 175;
  ROLE_DOC_PREFACE = 176;
  ROLE_DOC_PROLOGUE = 177;
  ROLE_DOC_PULLQUOTE = 178;
  ROLE_DOC_QNA = 179;
  ROLE_DOC_SUBTITLE = 180;
  ROLE_DOC_TIP = 181;
  ROLE_DOC_TOC = 182;
  // End DPub roles.
  // --------------------------------------------------------------

  // LIST_GRID behaves similar to an ARIA grid but is primarily used by
  // Chromium's TableView and its subclasses, so that they could be exposed
  // correctly on certain platforms.
  ROLE_LIST_GRID = 183;

  // Chromium internal
  // TBD: Do we need this for any anticipated use case of AccessKit?
  ROLE_DESKTOP = 184;
}

message Rect {
  float left = 1;
  float top = 2;
  float width = 3;
  float height = 4;
}

// 4x4 transformation matrix. Omit this message for the identity matrix,
// to save the cost of serialization and deserialization.
message Transform {
  // Column major order. Always 16 items.
  repeated float matrix = 1;
}

// The relative bounding box of a Node.
//
// This is an efficient, compact, serializable representation of a node's
// bounding box that requires minimal changes to the tree when layers are
// moved or scrolled. Computing the absolute bounding box of a node requires
// walking up the tree and applying node offsets and transforms until reaching
// the top.
//
// If the offset container id is present, the bounds are relative
// to the node with that offset container id.
//
// Otherwise, for a node other than the root, the bounds are relative to
// the root of the tree, and for the root of a tree, the bounds are relative
// to its immediate containing node.
message RelativeBounds {
  // The id of an ancestor node in the same Tree that this object's
  // bounding box is relative to. Omit if there's no offset container.
  google.protobuf.Int32Value offset_container_id = 1;

  // The relative bounding box of this node.
  Rect bounds = 2;

  // An additional transform to apply to position this object and its subtree.
  // This is rarely used and should be omitted if not needed, i.e. if
  // the transform would be the identity matrix.
  Transform transform = 3;
}

// An action to be taken on an accessibility node.
// In contrast to |DefaultActionVerb|, these describe what happens to the
// object, e.g. "FOCUS".
enum Action {
  // Do the default action for an object, typically this means "click".
  ACTION_DO_DEFAULT = 0;

  // Request image annotations for all the eligible images on a page.
  ACTION_ANNOTATE_PAGE_IMAGES = 1;

  ACTION_BLUR = 2;

  // Notifies a node that it no longer has accessibility focus.
  // Currently used only on Android and only internally, it's not
  // exposed to the open web. See SET_ACCESSIBILITY_FOCUS, below.
  ACTION_CLEAR_ACCESSIBILITY_FOCUS = 3;

  // Collapse the collapsible node.
  ACTION_COLLAPSE = 4;

  ACTION_CUSTOM_ACTION = 5;

  // Decrement a slider or range control by one step value.
  ACTION_DECREMENT = 6;

  // Expand the expandable node.
  ACTION_EXPAND = 7;

  ACTION_FOCUS = 8;

  // Return the content of this image object in the image_data attribute.
  ACTION_GET_IMAGE_DATA = 9;

  // Gets the bounding rect for a range of text.
  ACTION_GET_TEXT_LOCATION = 10;

  ACTION_HIDE_TOOLTIP = 11;

  // Given a point, find the object it corresponds to and fire a
  // |ActionRequest.hit_test_event_to_fire| event on it in response.
  ACTION_HIT_TEST = 12;

  // Increment a slider or range control by one step value.
  ACTION_INCREMENT = 13;

  // Request that the tree source invalidate its entire tree.
  ACTION_INVALIDATE_TREE = 14;

  // Load inline text boxes for this subtree, providing information
  // about word boundaries, line layout, and individual character
  // bounding boxes.
  ACTION_LOAD_INLINE_TEXT_BOXES = 15;

  // Delete any selected text in the control's text value and
  // insert |ActionRequest.value| in its place, like when typing or pasting.
  ACTION_REPLACE_SELECTED_TEXT = 16;

  // Scrolls by approximately one screen in a specific direction. Should be
  // called on a node that has scrollable boolean set to true.
  ACTION_SCROLL_BACKWARD = 17;
  ACTION_SCROLL_DOWN = 18;
  ACTION_SCROLL_FORWARD = 19;
  ACTION_SCROLL_LEFT = 20;
  ACTION_SCROLL_RIGHT = 21;
  ACTION_SCROLL_UP = 22;

  // Scroll any scrollable containers to make the target object visible
  // on the screen.  Optionally pass a subfocus rect in
  // ActionRequest.target_rect, in node-local coordinates.
  ACTION_SCROLL_INTO_VIEW = 23;

  // Scroll the given object to a specified point on the screen in
  // global screen coordinates. Pass a point in ActionRequest.target_point.
  ACTION_SCROLL_TO_POINT = 24;

  // Notifies a node that it has accessibility focus.
  // Currently used only on Android and only internally, it's not
  // exposed to the open web. See CLEAR_ACCESSIBILITY_FOCUS, above.
  ACTION_SET_ACCESSIBILITY_FOCUS = 25;

  ACTION_SET_SCROLL_OFFSET = 26;
  ACTION_SET_SELECTION = 27;

  // Don't focus this node, but set it as the sequential focus navigation
  // starting point, so that pressing Tab moves to the next element
  // following this one, for example.
  ACTION_SET_SEQUENTIAL_FOCUS_NAVIGATION_STARTING_POINT = 28;

  // Replace the value of the control with ActionRequest.value and
  // reset the selection, if applicable.
  ACTION_SET_VALUE = 29;

  ACTION_SHOW_CONTEXT_MENU = 30;
  ACTION_SHOW_TOOLTIP = 31;
}

enum MarkerType {
  MARKER_TYPE_NONE = 0;
  MARKER_TYPE_SPELLING_ERROR = 1;
  MARKER_TYPE_GRAMMAR_ERROR = 2;
  MARKER_TYPE_SEARCH_MATCH = 3;
  MARKER_TYPE_ACTIVE_SUGGESTION = 4;
  MARKER_TYPE_SUGGESTION = 5;
}

enum TextDirection {
  TEXT_DIRECTION_LEFT_TO_RIGHT = 0;
  TEXT_DIRECTION_RIGHT_TO_LEFT = 1;
  TEXT_DIRECTION_TOP_TO_BOTTOM = 2;
  TEXT_DIRECTION_BOTTOM_TO_TOP = 3;
}

enum InvalidState {
  INVALID_STATE_FALSE = 0;
  INVALID_STATE_TRUE = 1;
  INVALID_STATE_OTHER = 2;
}

// To determine whether to use CHECKED_STATE_NONE or CHECKED_STATE_FALSE,
// consider whether a screen reader should explicitly announce that
// the node is not checked.
enum CheckedState {
  CHECKED_STATE_NONE = 0;
  CHECKED_STATE_FALSE = 1;
  CHECKED_STATE_TRUE = 2;
  CHECKED_STATE_MIXED = 3;
}

enum NameFrom {
  NAME_FROM_NONE = 0;

  // E.g. aria-label.
  NAME_FROM_ATTRIBUTE = 1;
  NAME_FROM_ATTRIBUTE_EXPLICITLY_EMPTY = 2;

  // E.g. in the case of a table, from a caption element.
  NAME_FROM_CAPTION = 3;

  NAME_FROM_CONTENTS = 4;

  // E.g. from an HTML placeholder attribute on a text field.
  NAME_FROM_PLACEHOLDER = 5;

  // E.g. from a figcaption Element in a figure.
  NAME_FROM_RELATED_ELEMENT = 6;

  // E.g. <input type="text" title="title">.
  NAME_FROM_TITLE = 7;

  // E.g. <input type="button" value="Button's name">.
  NAME_FROM_VALUE = 8;
}

enum DescriptionFrom {
  DESCRIPTION_FROM_NONE = 0;
  DESCRIPTION_FROM_ARIA_DESCRIPTION = 1;

  // HTML-AAM 5.2.2
  DESCRIPTION_FROM_BUTTON_LABEL = 2;

  DESCRIPTION_FROM_RELATED_ELEMENT = 3;
  DESCRIPTION_FROM_RUBY_ANNOTATION = 4;

  // HTML-AAM 5.8.2
  DESCRIPTION_FROM_SUMMARY = 5;

  // HTML-AAM 5.9.2
  DESCRIPTION_FROM_TABLE_CAPTION = 6;

  DESCRIPTION_FROM_TITLE = 7;
}

// A list of valid values for the default_action_verb field on Node.
// These will describe the action that will be performed on a given node when
// executing the default action, which is a click.
// In contrast to Action, these describe what the user can do on the
// object, e.g. "PRESS", not what happens to the object as a result.
// Only one verb can be used at a time to describe the default action.
enum DefaultActionVerb {
  DEFAULT_ACTION_VERB_NONE = 0;
  DEFAULT_ACTION_VERB_ACTIVATE = 1;
  DEFAULT_ACTION_VERB_CHECK = 2;
  DEFAULT_ACTION_VERB_CLICK = 3;

  // A click will be performed on one of the node's ancestors.
  // This happens when the node itself is not clickable, but one of its
  // ancestors has click handlers attached which are able to capture the click
  // as it bubbles up.
  DEFAULT_ACTION_VERB_CLICK_ANCESTOR = 4;

  DEFAULT_ACTION_VERB_JUMP = 5;
  DEFAULT_ACTION_VERB_OPEN = 6;
  DEFAULT_ACTION_VERB_PRESS = 7;
  DEFAULT_ACTION_VERB_SELECT = 8;
  DEFAULT_ACTION_VERB_UNCHECK = 9;
}

enum SortDirection {
  SORT_DIRECTION_NONE = 0;
  SORT_DIRECTION_UNSORTED = 1;
  SORT_DIRECTION_ASCENDING = 2;
  SORT_DIRECTION_DESCENDING = 3;
  SORT_DIRECTION_OTHER = 4;
}

enum AriaCurrent {
  ARIA_CURRENT_NONE = 0;
  ARIA_CURRENT_FALSE = 1;
  ARIA_CURRENT_TRUE = 2;
  ARIA_CURRENT_PAGE = 3;
  ARIA_CURRENT_STEP = 4;
  ARIA_CURRENT_LOCATION = 5;
  ARIA_CURRENT_DATE = 6;
  ARIA_CURRENT_TIME = 7;
}

enum HasPopup {
  HAS_POPUP_FALSE = 0;
  HAS_POPUP_TRUE = 1;
  HAS_POPUP_MENU = 2;
  HAS_POPUP_LISTBOX = 3;
  HAS_POPUP_TREE = 4;
  HAS_POPUP_GRID = 5;
  HAS_POPUP_DIALOG = 6;
}

enum ListStyle {
  LIST_STYLE_NONE = 0;
  LIST_STYLE_CIRCLE = 1;
  LIST_STYLE_DISC = 2;
  LIST_STYLE_IMAGE = 3;
  LIST_STYLE_NUMERIC = 4;
  LIST_STYLE_SQUARE = 5;

  // Language specific ordering (alpha, roman, cjk-ideographic, etc...)
  LIST_STYLE_OTHER = 6;
}

// Types of text alignment according to the IAccessible2 Object Attributes spec.
enum TextAlign {
  TEXT_ALIGN_NONE = 0;
  TEXT_ALIGN_LEFT = 1;
  TEXT_ALIGN_RIGHT = 2;
  TEXT_ALIGN_CENTER = 3;
  TEXT_ALIGN_JUSTIFY = 4;
}

enum VerticalOffset {
  VERTICAL_OFFSET_NONE = 0;
  VERTICAL_OFFSET_SUBSCRIPT = 1;
  VERTICAL_OFFSET_SUPERSCRIPT = 2;
}

enum TextDecorationStyle {
  TEXT_DECORATION_STYLE_NONE = 0;
  TEXT_DECORATION_STYLE_DOTTED = 1;
  TEXT_DECORATION_STYLE_DASHED = 2;
  TEXT_DECORATION_STYLE_SOLID = 3;
  TEXT_DECORATION_STYLE_DOUBLE = 4;
  TEXT_DECORATION_STYLE_WAVY = 5;
}

// A single accessible object. A complete UI is represented as a tree of these.
message Node {
  int32 id = 1;
  Role role = 2;
  RelativeBounds bounds = 3;
  repeated int32 child_ids = 4;

  google.protobuf.StringValue name = 5;
  google.protobuf.StringValue description = 6;
  google.protobuf.StringValue value = 7;

  bool autofill_available = 8;
  bool collapsed = 9;
  bool expanded = 10;
  bool default = 11;
  bool editable = 12;
  bool focusable = 13;

  // Grows horizontally, e.g. most toolbars and separators.
  bool horizontal = 14;

  // Grows vertically, e.g. menu or combo box.
  bool vertical = 15;

  bool hovered = 16;

  // Skip over this node in the accessibility tree, but keep its subtree.
  bool ignored = 17;

  bool invisible = 18;
  bool linked = 19;
  bool multiline = 20;
  bool multiselectable = 21;
  bool protected = 22;
  bool required = 23;
  bool richly_editable = 24;
  bool visited = 25;

  // Unordered set of actions supported by this node.
  repeated Action actions = 26;

  // Ids of nodes that are children of this node logically, but are
  // not children of this node in the tree structure. As an example,
  // a table cell is a child of a row, and an 'indirect' child of a
  // column.
  repeated int32 indirect_child_ids = 27;

  // Relationships between this node and other nodes.
  repeated int32 controls_ids = 28;
  repeated int32 details_ids = 29;
  repeated int32 described_by_ids = 30;
  repeated int32 flow_to_ids = 31;
  repeated int32 labelled_by_ids = 32;
  repeated int32 radio_group_ids = 33;

  // For static text. These lists must be the same size; they represent
  // the start and end character offset of each marker. Examples of markers
  // include spelling and grammar errors, and find-in-page matches.
  repeated MarkerType marker_types = 34;
  repeated int32 marker_starts = 35;
  repeated int32 marker_ends = 36;

  // For inline text. This is the pixel position of the end of this
  // character within the bounding rectangle of this object, in the
  // direction given by text_direction. For example, for left-to-right
  // text, the first offset is the right coordinate of the first
  // character within the object's bounds, the second offset
  // is the right coordinate of the second character, and so on.
  repeated float character_offsets = 37;

  // For inline text. These int lists must be the same size; they represent
  // the start and end character offset of each word within this text.
  repeated int32 word_starts = 38;
  repeated int32 word_ends = 39;

  // Defines custom actions for a UI element. For example, a list UI
  // can allow a user to reorder items in the list by dragging the items.
  repeated int32 custom_action_ids = 40;

  // Descriptions for custom actions. This must be aligned with
  // custom_action_ids.
  repeated string custom_action_descriptions = 41;

  // Specifies the direction of the text, e.g. right-to-left.
  TextDirection text_direction = 42;

  google.protobuf.StringValue access_key = 43;

  // Indicates if a form control has invalid input or
  // if a web DOM element has an aria-invalid attribute.
  InvalidState invalid_state = 44;

  // Only used when invalid_state == INVALID_STATE_OTHER.
  google.protobuf.StringValue aria_invalid_value = 45;

  google.protobuf.StringValue auto_complete = 46;
  CheckedState checked_state = 47;
  google.protobuf.StringValue checked_state_description = 48;
  google.protobuf.StringValue child_tree_id = 49;
  google.protobuf.StringValue class_name = 50;
  google.protobuf.StringValue container_live_relevant = 51;
  google.protobuf.StringValue container_live_status = 52;
  google.protobuf.StringValue css_display = 53;

  // Only present when different from parent.
  google.protobuf.StringValue font_family = 54;

  google.protobuf.StringValue html_tag = 55;

  google.protobuf.StringValue inner_html = 56;
  google.protobuf.StringValue input_type = 57;
  google.protobuf.StringValue key_shortcuts = 58;

  // Only present when different from parent.
  google.protobuf.StringValue language = 59;

  google.protobuf.StringValue live_relevant = 60;
  google.protobuf.StringValue live_status = 61;

  // Only if not already exposed in name (NAME_FROM_PLACEHOLDER)
  google.protobuf.StringValue placeholder = 62;

  google.protobuf.StringValue custom_role = 63;
  google.protobuf.StringValue role_description = 64;

  // Only if not already exposed in name (NAME_FROM_TITLE)
  google.protobuf.StringValue tooltip = 65;

  google.protobuf.StringValue url = 66;

  // What information was used to compute the object's name.
  NameFrom name_from = 67;

  bool busy = 68;

  // The object functions as a text field which exposes its descendants.
  // Use cases include the root of a content-editable region, an ARIA
  // textbox which isn't currently editable and which has interactive
  // descendants, and a <body> element that has "design-mode" set to "on".
  bool nonatomic_text_field_root = 69;

  // Live region attributes.
  bool container_live_atomic = 70;
  bool container_live_busy = 71;
  bool live_atomic = 72;

  // If a dialog box is marked as explicitly modal
  bool modal = 73;

  // If this is set, all of the other fields in this message should
  // be ignored and only the locations should change.
  bool update_location_only = 74;

  // Set on a canvas element if it has fallback content.
  bool canvas_has_fallback = 75;

  // Indicates this node is user-scrollable, e.g. overflow:scroll|auto, as
  // opposed to only programmatically scrollable, like overflow:hidden, or
  // not scrollable at all, e.g. overflow:visible.
  bool scrollable = 76;

  // A hint to clients that the node is clickable.
  bool clickable = 77;

  // Indicates that this node clips its children, i.e. may have
  // overflow: hidden or clip children by default.
  bool clips_children = 78;

  // Indicates that this node is not selectable because the style has
  // user-select: none. Note that there may be other reasons why a node is
  // not selectable - for example, bullets in a list. However, this attribute
  // is only set on user-select: none.
  bool not_user_selectable_style = 79;

  // Indicates whether this node is selected or unselected.
  // The absence of this flag (as opposed to a false setting)
  // means that the concept of "selected" doesn't apply.
  google.protobuf.BoolValue selected = 80;

  // Indicates whether this node is selected due to selection follows focus.
  bool selected_from_focus = 81;

  // Indicates whether this node supports text location.
  bool supports_text_location = 82;

  // Indicates whether this node can be grabbed for drag-and-drop operation.
  // Note: aria-grabbed is deprecated in WAI-ARIA 1.1.
  bool grabbed = 83;

  // Indicates whether this node causes a hard line-break
  // (e.g. block level elements, or <br>)
  bool is_line_breaking_object = 84;

  // Indicates whether this node causes a page break
  bool is_page_breaking_object = 85;

  // True if the node has any ARIA attributes set.
  bool has_aria_attribute = 86;

  // This element allows touches to be passed through when a screen reader
  // is in touch exploration mode, e.g. a virtual keyboard normally
  // behaves this way.
  bool touch_pass_through = 87;

  DefaultActionVerb default_action_verb = 88;

  // Scrollable container attributes.
  google.protobuf.FloatValue scroll_x = 89;
  google.protobuf.FloatValue scroll_x_min = 90;
  google.protobuf.FloatValue scroll_x_max = 91;
  google.protobuf.FloatValue scroll_y = 92;
  google.protobuf.FloatValue scroll_y_min = 93;
  google.protobuf.FloatValue scroll_y_max = 94;

  // Attributes for retrieving the endpoints of a selection.
  google.protobuf.Int32Value text_sel_start = 95;
  google.protobuf.Int32Value text_sel_end = 96;

  google.protobuf.Int32Value aria_column_count = 97;
  google.protobuf.Int32Value aria_cell_column_index = 98;
  google.protobuf.Int32Value aria_cell_column_span = 99;
  google.protobuf.Int32Value aria_row_count = 100;
  google.protobuf.Int32Value aria_cell_row_index = 101;
  google.protobuf.Int32Value aria_cell_row_span = 102;

  // Table attributes.
  google.protobuf.Int32Value table_row_count = 103;
  google.protobuf.Int32Value table_column_count = 104;
  google.protobuf.Int32Value table_header_id = 105;

  // Table row attributes.
  google.protobuf.Int32Value table_row_index = 106;
  google.protobuf.Int32Value table_row_header_id = 107;

  // Table column attributes.
  google.protobuf.Int32Value table_column_index = 108;
  google.protobuf.Int32Value table_column_header_id = 109;

  // Table cell attributes.
  google.protobuf.Int32Value table_cell_column_index = 110;
  google.protobuf.Int32Value table_cell_column_span = 111;
  google.protobuf.Int32Value table_cell_row_index = 112;
  google.protobuf.Int32Value table_cell_row_span = 113;
  SortDirection sort_direction = 114;

  // Tree control attributes.
  google.protobuf.Int32Value hierarchical_level = 115;

  // What information was used to compute the object's description.
  DescriptionFrom description_from = 116;

  // Relationships between this node and other nodes.
  google.protobuf.Int32Value active_descendant_id = 117;
  google.protobuf.Int32Value error_message_id = 118;
  google.protobuf.Int32Value in_page_link_target_id = 119;
  google.protobuf.Int32Value member_of_id = 120;
  google.protobuf.Int32Value next_on_line_id = 121;
  google.protobuf.Int32Value previous_on_line_id = 122;
  google.protobuf.Int32Value popup_for_id = 123;

  // Use for a textbox that allows focus/selection but not input.
  bool read_only = 124;

  // Use for a control or group of controls that disallows input.
  bool disabled = 125;

  // Position or Number of items in current set of listitems or treeitems
  google.protobuf.Int32Value set_size = 126;
  google.protobuf.Int32Value pos_in_set = 127;

  // For the COLOR_WELL role, specifies the selected color in RGBA.
  google.protobuf.Int32Value color_value = 128;

  AriaCurrent aria_current = 129;

  // Text attributes.

  // Foreground and background color in RGBA.
  google.protobuf.Int32Value background_color = 130;
  google.protobuf.Int32Value color = 131;

  HasPopup has_popup = 132;

  // The list style type. Only available on list items.
  ListStyle list_style = 133;

  // Specifies the alignment of the text, e.g. left, center, right, justify
  TextAlign text_align = 134;

  // Specifies the vertical offset of the text, e.g., subscript.
  VerticalOffset vertical_offset = 135;

  bool bold = 136;
  bool italic = 137;
  bool underline = 138;
  bool line_through = 139;
  bool overline = 140;

  // The overline text decoration style.
  TextDecorationStyle text_overline_style = 141;

  // The strikethrough text decoration style.
  TextDecorationStyle text_strikethrough_style = 142;

  // The underline text decoration style.
  TextDecorationStyle text_underline_style = 143;

  // Focus traversal order.
  google.protobuf.Int32Value previous_focus_id = 144;
  google.protobuf.Int32Value next_focus_id = 145;

  // For indicating what functions can be performed when a dragged object
  // is released on the drop target.
  // Note: aria-dropeffect is deprecated in WAI-ARIA 1.1.
  bool drop_effect_copy = 146;
  bool drop_effect_execute = 147;
  bool drop_effect_link = 148;
  bool drop_effect_move = 149;
  bool drop_effect_popup = 150;

  // Range attributes.
  google.protobuf.FloatValue value_for_range = 151;
  google.protobuf.FloatValue min_value_for_range = 152;
  google.protobuf.FloatValue max_value_for_range = 153;
  google.protobuf.FloatValue step_value_for_range = 154;

  // Text attributes.
  // Font size is in pixels.
  google.protobuf.FloatValue font_size = 155;

  // Font weight can take on any arbitrary numeric value. Increments of 100 in
  // range [0, 900] represent keywords such as light, normal, bold, etc.
  google.protobuf.FloatValue font_weight = 156;

  // The text indent of the text, in mm.
  google.protobuf.FloatValue text_indent = 157;
}

// The data associated with an accessibility tree that's global to the
// tree and not associated with any particular node in the tree.
message Tree {
  // The globally unique ID of this accessibility tree. The format of this ID
  // is up to the implementer. A UUID v4 is a safe choice.
  string id = 1;

  // The ID of the accessibility tree that this tree is contained in, if any.
  google.protobuf.StringValue parent_tree_id = 2;

  // The ID of the accessibility tree that has focus, if it's a descendant
  // of this tree.
  google.protobuf.StringValue focused_tree_id = 3;

  // The node with keyboard focus within this tree, if any.
  google.protobuf.Int32Value focused_node_id = 4;

  // The node that's used as the root scroller, if any. On some platforms
  // like Android we need to ignore accessibility scroll offsets for
  // that node and get them from the viewport instead.
  google.protobuf.Int32Value root_scroller_id = 5;
}

// A TreeUpdate is a serializable representation of an atomic change
// to a tree. The sender and receiver must be in sync; the update
// is only meant to bring the tree from a specific previous state into
// its next state. Trying to apply it to the wrong tree should immediately
// die with a fatal assertion.
//
// A TreeUpdate consists of an optional node id to clear (meaning
// that all of that node's children and their descendants are deleted),
// followed by an ordered list of zero or more Node messages to be applied
// to the tree in order. An update may also include an optional new version
// of the Tree message that applies to the tree as a whole.
//
// Suppose that the next Node to be applied is |node|. The following
// invariants must hold:
// 1. Either
//   a) |node.id| is already in the tree, or
//   b) the tree is empty, and
//      |node| is the new root of the tree.
// 2. Every child id in |node.child_ids| must either be already a child
//        of this node, or a new id not previously in the tree. It is not
//        allowed to "reparent" a child to this node without first removing
//        that child from its previous parent.
// 3. When a new id appears in |node.child_ids|, the tree should create a
//        new uninitialized placeholder node for it immediately. That
//        placeholder must be updated within the same TreeUpdate, otherwise
//        it's a fatal error. This guarantees the tree is always complete
//        before or after a TreeUpdate.
message TreeUpdate {
  // The optional id of a node to clear, before applying any updates.
  // Clearing a node means deleting all of its children and their descendants,
  // but leaving that node in the tree. It's an error to clear a node but not
  // subsequently update it as part of the tree update.
  google.protobuf.Int32Value node_id_to_clear = 1;

  // The ordered list of nodes to update, according to the rules above.
  repeated Node nodes = 2;

  // Updated information about the tree as a whole. This may be omitted
  // if it has not changed since the previous update, but providing the same
  // information again is also allowed. This is required when initializing
  // a tree.
  Tree tree = 3;

  // The id of the tree's root node. This is required when the tree
  // is being initialized or if the root is changing.
  google.protobuf.Int32Value root_id = 4;
}
