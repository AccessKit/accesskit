diff --git a/content/browser/accessibility/accessibility_tree_formatter_blink.cc b/content/browser/accessibility/accessibility_tree_formatter_blink.cc
index 7fb29527c033..7d1bc3391bce 100644
--- a/content/browser/accessibility/accessibility_tree_formatter_blink.cc
+++ b/content/browser/accessibility/accessibility_tree_formatter_blink.cc
@@ -31,25 +31,6 @@ namespace {
 absl::optional<std::string> GetStringAttribute(
     const ui::AXNode& node,
     ax::mojom::StringAttribute attr) {
-  // Language is different from other string attributes as it inherits and has
-  // a method to compute it.
-  if (attr == ax::mojom::StringAttribute::kLanguage) {
-    std::string value = node.GetLanguage();
-    if (value.empty()) {
-      return absl::nullopt;
-    }
-    return value;
-  }
-
-  // Font Family is different from other string attributes as it inherits.
-  if (attr == ax::mojom::StringAttribute::kFontFamily) {
-    std::string value = node.GetInheritedStringAttribute(attr);
-    if (value.empty()) {
-      return absl::nullopt;
-    }
-    return value;
-  }
-
   // Always return the attribute if the node has it, even if the value is an
   // empty string.
   std::string value;
@@ -69,38 +50,6 @@ std::string FormatColor(int argb) {
 std::string IntAttrToString(const ui::AXNode& node,
                             ax::mojom::IntAttribute attr,
                             int32_t value) {
-  if (ui::IsNodeIdIntAttribute(attr)) {
-    // Relation
-    ui::AXTreeID tree_id = node.tree()->GetAXTreeID();
-    ui::AXNode* target = ui::AXTreeManagerMap::GetInstance()
-                             .GetManager(tree_id)
-                             ->GetNodeFromTree(tree_id, value);
-    if (!target)
-      return "null";
-
-    std::string result = ui::ToString(target->data().role);
-    // Provide some extra info about the related object via the name or
-    // possibly the class (if an element).
-    // TODO(accessibility) Include all relational attributes here.
-    // TODO(accessibility) Consider using line numbers from the results instead.
-    if (attr == ax::mojom::IntAttribute::kNextOnLineId ||
-        attr == ax::mojom::IntAttribute::kPreviousOnLineId) {
-      if (target->data().HasStringAttribute(
-              ax::mojom::StringAttribute::kName)) {
-        result += ":\"";
-        result += target->data().GetStringAttribute(
-            ax::mojom::StringAttribute::kName);
-        result += "\"";
-      } else if (target->data().HasStringAttribute(
-                     ax::mojom::StringAttribute::kClassName)) {
-        result += ".";
-        result += target->data().GetStringAttribute(
-            ax::mojom::StringAttribute::kClassName);
-      }
-    }
-    return result;
-  }
-
   switch (attr) {
     case ax::mojom::IntAttribute::kAriaCurrentState:
       return ui::ToString(static_cast<ax::mojom::AriaCurrentState>(value));
@@ -137,9 +86,9 @@ std::string IntAttrToString(const ui::AXNode& node,
     case ax::mojom::IntAttribute::kImageAnnotationStatus:
       return ui::ToString(static_cast<ax::mojom::ImageAnnotationStatus>(value));
     case ax::mojom::IntAttribute::kBackgroundColor:
-      return FormatColor(node.ComputeBackgroundColor());
+      return FormatColor(value);
     case ax::mojom::IntAttribute::kColor:
-      return FormatColor(node.ComputeColor());
+      return FormatColor(value);
     // No pretty printing necessary for these:
     case ax::mojom::IntAttribute::kActivedescendantId:
     case ax::mojom::IntAttribute::kAriaCellColumnIndex:
@@ -320,139 +269,7 @@ void AccessibilityTreeFormatterBlink::RecursiveBuildTree(
 void AccessibilityTreeFormatterBlink::AddProperties(
     const BrowserAccessibility& node,
     base::DictionaryValue* dict) const {
-  int id = node.GetId();
-  dict->SetInteger("id", id);
-
-  dict->SetString("internalRole", ui::ToString(node.GetData().role));
-
-  gfx::Rect bounds =
-      gfx::ToEnclosingRect(node.GetData().relative_bounds.bounds);
-  dict->SetInteger("boundsX", bounds.x());
-  dict->SetInteger("boundsY", bounds.y());
-  dict->SetInteger("boundsWidth", bounds.width());
-  dict->SetInteger("boundsHeight", bounds.height());
-
-  ui::AXOffscreenResult offscreen_result = ui::AXOffscreenResult::kOnscreen;
-  gfx::Rect page_bounds = node.GetClippedRootFrameBoundsRect(&offscreen_result);
-  dict->SetInteger("pageBoundsX", page_bounds.x());
-  dict->SetInteger("pageBoundsY", page_bounds.y());
-  dict->SetInteger("pageBoundsWidth", page_bounds.width());
-  dict->SetInteger("pageBoundsHeight", page_bounds.height());
-
-  dict->SetBoolean("transform",
-                   node.GetData().relative_bounds.transform &&
-                       !node.GetData().relative_bounds.transform->IsIdentity());
-
-  gfx::Rect unclipped_bounds =
-      node.GetUnclippedRootFrameBoundsRect(&offscreen_result);
-  dict->SetInteger("unclippedBoundsX", unclipped_bounds.x());
-  dict->SetInteger("unclippedBoundsY", unclipped_bounds.y());
-  dict->SetInteger("unclippedBoundsWidth", unclipped_bounds.width());
-  dict->SetInteger("unclippedBoundsHeight", unclipped_bounds.height());
-
-  for (int32_t state_index = static_cast<int32_t>(ax::mojom::State::kNone);
-       state_index <= static_cast<int32_t>(ax::mojom::State::kMaxValue);
-       ++state_index) {
-    auto state = static_cast<ax::mojom::State>(state_index);
-    if (node.HasState(state))
-      dict->SetBoolean(ui::ToString(state), true);
-  }
-
-  if (offscreen_result == ui::AXOffscreenResult::kOffscreen)
-    dict->SetBoolean(STATE_OFFSCREEN, true);
-
-  for (int32_t attr_index =
-           static_cast<int32_t>(ax::mojom::StringAttribute::kNone);
-       attr_index <=
-       static_cast<int32_t>(ax::mojom::StringAttribute::kMaxValue);
-       ++attr_index) {
-    auto attr = static_cast<ax::mojom::StringAttribute>(attr_index);
-    auto maybe_value = GetStringAttribute(*node.node(), attr);
-    if (maybe_value.has_value())
-      dict->SetString(ui::ToString(attr), maybe_value.value());
-  }
-
-  for (int32_t attr_index =
-           static_cast<int32_t>(ax::mojom::IntAttribute::kNone);
-       attr_index <= static_cast<int32_t>(ax::mojom::IntAttribute::kMaxValue);
-       ++attr_index) {
-    auto attr = static_cast<ax::mojom::IntAttribute>(attr_index);
-    auto maybe_value = ui::ComputeAttribute(&node, attr);
-    if (maybe_value.has_value()) {
-      dict->SetString(ui::ToString(attr),
-                      IntAttrToString(*node.node(), attr, maybe_value.value()));
-    }
-  }
-
-  for (int32_t attr_index =
-           static_cast<int32_t>(ax::mojom::FloatAttribute::kNone);
-       attr_index <= static_cast<int32_t>(ax::mojom::FloatAttribute::kMaxValue);
-       ++attr_index) {
-    auto attr = static_cast<ax::mojom::FloatAttribute>(attr_index);
-    if (node.HasFloatAttribute(attr) &&
-        std::isfinite(node.GetFloatAttribute(attr)))
-      dict->SetDouble(ui::ToString(attr), node.GetFloatAttribute(attr));
-  }
-
-  for (int32_t attr_index =
-           static_cast<int32_t>(ax::mojom::BoolAttribute::kNone);
-       attr_index <= static_cast<int32_t>(ax::mojom::BoolAttribute::kMaxValue);
-       ++attr_index) {
-    auto attr = static_cast<ax::mojom::BoolAttribute>(attr_index);
-    if (node.HasBoolAttribute(attr))
-      dict->SetBoolean(ui::ToString(attr), node.GetBoolAttribute(attr));
-  }
-
-  for (int32_t attr_index =
-           static_cast<int32_t>(ax::mojom::IntListAttribute::kNone);
-       attr_index <=
-       static_cast<int32_t>(ax::mojom::IntListAttribute::kMaxValue);
-       ++attr_index) {
-    auto attr = static_cast<ax::mojom::IntListAttribute>(attr_index);
-    if (node.HasIntListAttribute(attr)) {
-      std::vector<int32_t> values;
-      node.GetIntListAttribute(attr, &values);
-      base::ListValue value_list;
-      for (size_t i = 0; i < values.size(); ++i) {
-        if (ui::IsNodeIdIntListAttribute(attr)) {
-          BrowserAccessibility* target = node.manager()->GetFromID(values[i]);
-          if (target)
-            value_list.AppendString(ui::ToString(target->GetData().role));
-          else
-            value_list.AppendString("null");
-        } else {
-          value_list.AppendInteger(values[i]);
-        }
-      }
-      dict->SetKey(ui::ToString(attr), std::move(value_list));
-    }
-  }
-
-  //  Check for relevant rich text selection info in AXTreeData
-  ui::AXTree::Selection unignored_selection =
-      node.manager()->ax_tree()->GetUnignoredSelection();
-  int anchor_id = unignored_selection.anchor_object_id;
-  if (id == anchor_id) {
-    int anchor_offset = unignored_selection.anchor_offset;
-    dict->SetInteger("TreeData.textSelStartOffset", anchor_offset);
-  }
-  int focus_id = unignored_selection.focus_object_id;
-  if (id == focus_id) {
-    int focus_offset = unignored_selection.focus_offset;
-    dict->SetInteger("TreeData.textSelEndOffset", focus_offset);
-  }
-
-  std::vector<std::string> actions_strings;
-  for (int32_t action_index =
-           static_cast<int32_t>(ax::mojom::Action::kNone) + 1;
-       action_index <= static_cast<int32_t>(ax::mojom::Action::kMaxValue);
-       ++action_index) {
-    auto action = static_cast<ax::mojom::Action>(action_index);
-    if (node.HasAction(action))
-      actions_strings.push_back(ui::ToString(action));
-  }
-  if (!actions_strings.empty())
-    dict->SetString("actions", base::JoinString(actions_strings, ","));
+    AddProperties(*node.node(), dict);
 }
 
 void AccessibilityTreeFormatterBlink::AddProperties(
@@ -468,6 +285,10 @@ void AccessibilityTreeFormatterBlink::AddProperties(
   dict->SetInteger("boundsWidth", bounds.width());
   dict->SetInteger("boundsHeight", bounds.height());
 
+  if (node.data().relative_bounds.offset_container_id > 0) {
+    dict->SetInteger("boundsOffsetContainerId", node.data().relative_bounds.offset_container_id);
+  }
+
   // TODO(kschmi): Add support for the following (potentially via AXTree):
   //  GetClippedRootFrameBoundsRect
   //    pageBoundsX
@@ -560,19 +381,7 @@ void AccessibilityTreeFormatterBlink::AddProperties(
       node.GetIntListAttribute(attr, &values);
       base::ListValue value_list;
       for (auto value : values) {
-        if (ui::IsNodeIdIntListAttribute(attr)) {
-          ui::AXTreeID tree_id = node.tree()->GetAXTreeID();
-          ui::AXNode* target = ui::AXTreeManagerMap::GetInstance()
-                                   .GetManager(tree_id)
-                                   ->GetNodeFromTree(tree_id, node.id());
-
-          if (target)
-            value_list.AppendString(ui::ToString(target->data().role));
-          else
-            value_list.AppendString("null");
-        } else {
-          value_list.AppendInteger(value);
-        }
+        value_list.AppendInteger(value);
       }
       dict->SetKey(ui::ToString(attr), std::move(value_list));
     }
diff --git a/content/browser/accessibility/dump_accessibility_tree_browsertest.cc b/content/browser/accessibility/dump_accessibility_tree_browsertest.cc
index 0940758c5efb..753a7f2ee8c1 100644
--- a/content/browser/accessibility/dump_accessibility_tree_browsertest.cc
+++ b/content/browser/accessibility/dump_accessibility_tree_browsertest.cc
@@ -2278,6 +2278,10 @@ IN_PROC_BROWSER_TEST_P(DumpAccessibilityTreeTest,
   RunHtmlTest(FILE_PATH_LITERAL("input-types-with-value.html"));
 }
 
+IN_PROC_BROWSER_TEST_P(DumpAccessibilityTreeTest, WebPageSample) {
+  RunHtmlTest(FILE_PATH_LITERAL("web-page-sample.html"));
+}
+
 IN_PROC_BROWSER_TEST_P(DumpAccessibilityTreeTest,
                        AccessibilityInputTypesWithPlaceholder) {
   RunHtmlTest(FILE_PATH_LITERAL("input-types-with-placeholder.html"));
diff --git a/ui/accessibility/platform/inspect/ax_tree_formatter_base.cc b/ui/accessibility/platform/inspect/ax_tree_formatter_base.cc
index 33fb9f61a0bc..92e536a8ef0f 100644
--- a/ui/accessibility/platform/inspect/ax_tree_formatter_base.cc
+++ b/ui/accessibility/platform/inspect/ax_tree_formatter_base.cc
@@ -4,6 +4,7 @@
 
 #include "ui/accessibility/platform/inspect/ax_tree_formatter_base.h"
 
+#include "base/json/json_string_value_serializer.h"
 #include "base/notreached.h"
 #include "base/strings/string_util.h"
 #include "base/strings/stringprintf.h"
@@ -13,15 +14,6 @@
 
 namespace ui {
 
-namespace {
-
-const char kIndentSymbol = '+';
-const int kIndentSymbolCount = 2;
-const char kSkipString[] = "@NO_DUMP";
-const char kSkipChildren[] = "@NO_CHILDREN_DUMP";
-
-}  // namespace
-
 AXTreeFormatterBase::AXTreeFormatterBase() = default;
 
 AXTreeFormatterBase::~AXTreeFormatterBase() = default;
@@ -32,21 +24,11 @@ const char AXTreeFormatterBase::kScriptsDictAttr[] = "scripts";
 
 bool AXTreeFormatterBase::ShouldDumpNode(
     const AXPlatformNodeDelegate& node) const {
-  for (const std::pair<ax::mojom::StringAttribute, std::string>&
-           string_attribute : node.GetData().string_attributes) {
-    if (string_attribute.second.find(kSkipString) != std::string::npos)
-      return false;
-  }
   return true;
 }
 
 bool AXTreeFormatterBase::ShouldDumpChildren(
     const AXPlatformNodeDelegate& node) const {
-  for (const std::pair<ax::mojom::StringAttribute, std::string>&
-           string_attribute : node.GetData().string_attributes) {
-    if (string_attribute.second.find(kSkipChildren) != std::string::npos)
-      return false;
-  }
   return true;
 }
 
@@ -92,42 +74,9 @@ base::Value AXTreeFormatterBase::BuildTreeForNode(ui::AXNode* root) const {
 void AXTreeFormatterBase::RecursiveFormatTree(const base::Value& dict,
                                               std::string* contents,
                                               int depth) const {
-  // Check dictionary against node filters, may require us to skip this node
-  // and its children.
-  if (MatchesNodeFilters(dict))
-    return;
-
-  if (dict.DictEmpty())
-    return;
-
-  std::string indent = std::string(depth * kIndentSymbolCount, kIndentSymbol);
-  std::string line =
-      indent + ProcessTreeForOutput(base::Value::AsDictionaryValue(dict));
-
-  // TODO(accessibility): This can be removed once the UIA tree formatter
-  // can call ShouldDumpNode().
-  if (line.find(kSkipString) != std::string::npos)
-    return;
-
-  // Normalize any Windows-style line endings by removing \r.
-  base::RemoveChars(line, "\r", &line);
-
-  // Replace literal newlines with "<newline>"
-  base::ReplaceChars(line, "\n", "<newline>", &line);
-
-  *contents += line + "\n";
-
-  // TODO(accessibility): This can be removed once the UIA tree formatter
-  // can call ShouldDumpChildren().
-  if (line.find(kSkipChildren) != std::string::npos)
-    return;
-
-  const base::Value* children = dict.FindListPath(kChildrenDictAttr);
-  if (children && !children->GetList().empty()) {
-    for (const auto& child_dict : children->GetList()) {
-      RecursiveFormatTree(child_dict, contents, depth + 1);
-    }
-  }
+    JSONStringValueSerializer serializer(contents);
+    serializer.set_pretty_print(true);
+    serializer.Serialize(dict);
 }
 
 void AXTreeFormatterBase::SetPropertyFilters(
diff --git a/ui/accessibility/platform/inspect/ax_tree_formatter_base.h b/ui/accessibility/platform/inspect/ax_tree_formatter_base.h
index b53da126acda..1dc4f4df5d79 100644
--- a/ui/accessibility/platform/inspect/ax_tree_formatter_base.h
+++ b/ui/accessibility/platform/inspect/ax_tree_formatter_base.h
@@ -127,7 +127,7 @@ class AX_EXPORT AXTreeFormatterBase : public AXTreeFormatter {
   std::vector<AXNodeFilter> node_filters_;
 
   // Whether or not node ids should be included in the dump.
-  bool show_ids_ = false;
+  bool show_ids_ = true;
 
   DISALLOW_COPY_AND_ASSIGN(AXTreeFormatterBase);
 };
